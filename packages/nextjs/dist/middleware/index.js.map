{"version":3,"sources":["../../src/middleware/index.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\n\ninterface MiddlewareConfig {\n  protectedPaths?: string[];\n  publicOnlyPaths?: string[];\n  loginUrl?: string;\n  callbackUrl?: string;\n}\n\n// ミドルウェア関数の型定義\nexport type MiddlewareFunction = (\n  request: NextRequest\n) => Promise<NextResponse | null> | NextResponse | null;\n\nexport function createAuthMiddleware(config: MiddlewareConfig = {}) {\n  const {\n    protectedPaths = [],\n    publicOnlyPaths = [],\n    loginUrl = \"/api/auth/login\",\n    callbackUrl = \"/\",\n  } = config;\n\n  return async function middleware(request: NextRequest) {\n    const { pathname } = request.nextUrl;\n\n    // トークンCookieの存在チェック（簡易的な認証状態判定）\n    const hasSession = request.cookies.has(\"noraneko-auth.token\");\n\n    // 保護されたパスへのアクセス\n    if (protectedPaths.some((path) => pathname.startsWith(path))) {\n      if (!hasSession) {\n        const loginUrlWithCallback = new URL(loginUrl, request.url);\n        loginUrlWithCallback.searchParams.set(\"callbackUrl\", request.url);\n        return NextResponse.redirect(loginUrlWithCallback);\n      }\n    }\n\n    // パブリックのみのパスへのアクセス（ログインページなど）\n    if (publicOnlyPaths.some((path) => pathname.startsWith(path))) {\n      if (hasSession) {\n        return NextResponse.redirect(new URL(callbackUrl, request.url));\n      }\n    }\n\n    return NextResponse.next();\n  };\n}\n\n/**\n * 複数のミドルウェア関数を順次実行するチェイン機能\n * 最初にレスポンスを返すミドルウェアでチェインが終了\n *\n * @param middlewares 実行するミドルウェア関数の配列\n * @returns チェインされたミドルウェア関数\n *\n * @example\n * import { chain, createAuthMiddleware } from '@noranekoid/nextjs/middleware'\n * import { rateLimitMiddleware } from './rate-limit'\n * import { corsMiddleware } from './cors'\n *\n * export default chain([\n *   corsMiddleware,\n *   rateLimitMiddleware,\n *   createAuthMiddleware({\n *     protectedPaths: ['/dashboard'],\n *     publicOnlyPaths: ['/login']\n *   })\n * ])\n */\nexport function chain(middlewares: MiddlewareFunction[]): MiddlewareFunction {\n  return async function chainedMiddleware(\n    request: NextRequest\n  ): Promise<NextResponse> {\n    for (const middleware of middlewares) {\n      const response = await middleware(request);\n\n      // ミドルウェアがレスポンスを返した場合、チェインを終了\n      if (response) {\n        return response;\n      }\n    }\n\n    // すべてのミドルウェアが null を返した場合、リクエストを続行\n    return NextResponse.next();\n  };\n}\n\n// デフォルトミドルウェア設定\nexport const defaultMiddleware = createAuthMiddleware({\n  protectedPaths: [\"/dashboard\"],\n  publicOnlyPaths: [\"/login\"],\n  loginUrl: \"/api/auth/login\",\n});\n"],"mappings":";AAAA,SAAsB,oBAAoB;AAcnC,SAAS,qBAAqB,SAA2B,CAAC,GAAG;AAClE,QAAM;AAAA,IACJ,iBAAiB,CAAC;AAAA,IAClB,kBAAkB,CAAC;AAAA,IACnB,WAAW;AAAA,IACX,cAAc;AAAA,EAChB,IAAI;AAEJ,SAAO,eAAe,WAAW,SAAsB;AACrD,UAAM,EAAE,SAAS,IAAI,QAAQ;AAG7B,UAAM,aAAa,QAAQ,QAAQ,IAAI,qBAAqB;AAG5D,QAAI,eAAe,KAAK,CAAC,SAAS,SAAS,WAAW,IAAI,CAAC,GAAG;AAC5D,UAAI,CAAC,YAAY;AACf,cAAM,uBAAuB,IAAI,IAAI,UAAU,QAAQ,GAAG;AAC1D,6BAAqB,aAAa,IAAI,eAAe,QAAQ,GAAG;AAChE,eAAO,aAAa,SAAS,oBAAoB;AAAA,MACnD;AAAA,IACF;AAGA,QAAI,gBAAgB,KAAK,CAAC,SAAS,SAAS,WAAW,IAAI,CAAC,GAAG;AAC7D,UAAI,YAAY;AACd,eAAO,aAAa,SAAS,IAAI,IAAI,aAAa,QAAQ,GAAG,CAAC;AAAA,MAChE;AAAA,IACF;AAEA,WAAO,aAAa,KAAK;AAAA,EAC3B;AACF;AAuBO,SAAS,MAAM,aAAuD;AAC3E,SAAO,eAAe,kBACpB,SACuB;AACvB,eAAW,cAAc,aAAa;AACpC,YAAM,WAAW,MAAM,WAAW,OAAO;AAGzC,UAAI,UAAU;AACZ,eAAO;AAAA,MACT;AAAA,IACF;AAGA,WAAO,aAAa,KAAK;AAAA,EAC3B;AACF;AAGO,IAAM,oBAAoB,qBAAqB;AAAA,EACpD,gBAAgB,CAAC,YAAY;AAAA,EAC7B,iBAAiB,CAAC,QAAQ;AAAA,EAC1B,UAAU;AACZ,CAAC;","names":[]}